 steps:
  - name: 'gcr.io/cloud-builders/docker'
    args:
    - 'build'
    - '-t'
    - 'gcr.io/$PROJECT_ID/spring-boot:$TAG_NAME'
    - '.'
  # pushes the image to Container Registry
   # The PROJECT_ID and SHORT_SHA variables are automatically replaced by Cloud Build.
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    args:
    - 'push'
    - 'gcr.io/$PROJECT_ID/spring-boot:$TAG_NAME'
  
  # generates the new manifest
    #the entrypoint in a build step to specify an entrypoint if you don't want to use the default entrypoint of the builder.
    #If you don't set this field, Cloud Build will use the builder's entrypoint.
  - name: 'gcr.io/cloud-builders/gcloud'
    id: Generate manifest
    entrypoint: /bin/sh
    args:
    - '-c'
    - |
       sed "s/GOOGLE_CLOUD_PROJECT/${PROJECT_ID}/g" /kubernetes.yaml.tpl | \
       sed "s/TAG_NAME/${TAG_NAME}/g" > kubernetes.yaml
       
  # deploys the new version of our container image in the Kubernetes Engine cluster.
    #The env takes a list of environment variables to be used when running the step. The are KEY=VALUE.
  - name: 'gcr.io/cloud-builders/kubectl'
    id: Deploy
    args: 
    - 'apply'
    - '-f'
    - 'kubernetes.yaml'
    env:
    - 'CLOUDSDK_COMPUTE_ZONE=asia-south1-a'
    - 'CLOUDSDK_CONTAINER_CLUSTER=prod-ti-mobile-backend-gke-cluster'
    timeout: 900s
